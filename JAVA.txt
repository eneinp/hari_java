* 프로그래밍 언어
  - 프로그래밍 언어는 컴퓨터가 실행할 프로그램을 작성하는 언어를 말함.
  
  - 컴퓨터는 이진수(binary code) 밖에 이해하지 못함.
        즉, 0과 1만 알고 있음.
        이렇게 이진수로 구성된 언어를 기계어(machine language)라고 함.
        
  - 프로그래밍 언어에는 여러가지가 있는데 사람이 이해하기 쉽고 자료를 
        효율적으로 표현할 수 있는 고급언어가 생겨나게 됨.
        
  - 고급언어는 초기에는 절차지향 언어 형태를 가졌지만, 현재는 객체지향
        언어로 진화하게 됨.
        
  - 컴퓨터는 JAVA나 C++과 같은 고급언어로 작성된 프로그램을 직접 처리할 수
        없음. 컴퓨터가 실행할 수 있는 기계어 코드로 변환되어야 하는데 이렇게
        기계어로 변환되는 작업을 컴파일(compile - 번역기) 이라고 함.
   
        
* JAVA의 역사
  - 1991년 가전 제품용으로 프로그램을 만든 것이 오크(Oak)언어임. 이것이 JAVA의 시초임.
  
  - 이후 인터넷이 급속도로 빠르게 발전하면서 인터넷 환경에 적응할 수 있도록 개발 방향을 
       바꾸었는데 이것이 JAVA의 시작임.
       
  - 1995년 웹 브라우저를 JAVA로 개발해 발표하였음.
  
  - 그 이후부터 버전을 지속적으로 업그레이드함.
 
        
* JAVA의 특징
  1. JAVA는 객체지향 언어이다.
     - 프로그램을 개발하는 기법으로 부품에 해당하는 객체를 먼저 만들어 내고,
             이것들을 하나하나씩 조립 및 연결하여 전체적인 프로그래밍을 완성하는 기법.
              
  2. JAVA는 이식성이 높은 언어이다. - ※ 플랫폼에 독립성을 가지고 있음.
     - 운영체제가 다르면 원래 MS 윈도우 환경에서 만들어진 프로그램은
             다른 운영체제에서는 프로그램을 해당 운영체제에 맞게 수정해서 사용해야 함. 
             하지만 JAVA는 소스 파일을 수정하지 않아도 사용 가능한 것이 장점임.
     
          ※ 플랫폼에 종속성
       - 예로는 운영체제의 대표적인 실행파일(.exe, .app, .sh) 등을 들 수 있음.
                윈도우에서는 .exe, 맥에서는 .app, 리눅스에서는 .sh가 해당이 됨.
                실행파일들은 일종의 기계어의 집합임. 즉 컴퓨터가 알아들을 수 있는 명령어들의 집합.
                따라서 다른 플랫폼(운영체제)에서 사용되는 기계어는 서로 알아듣지 못함.
                윈도우 실행 파일(.exe)는 윈도우 플랫폼에서는 동작을 하지만, 다른 플랫폼에서는
                동작을 하지 못함. 이러한 특징을 '플랫폼 종속성' 이라고 말함.
    
          ※ 플랫폼에 독립성
       - 플랫폼의 종속성의 반대말임. 즉, 하나의 프로그램이 모든 플랫폼에서 실행이 가능.
                 하지만 여기서 의문이 생길 수 밖에 없음. 분명히 모든 플랫폼은 각각의 다른 기계어를
                 사용한다고 말을 했음. 따라서 모든 플랫폼에서 실행이 될 수가 없는 상태임.
                 그렇다면 JAVA는 어떻게 플랫폼의 독립성을 가지고 있을까? 그것은 바로 
         JVM(Java Virtual Machine) 자바 가상 머신 덕분임.
                 먼저 다양한 플랫폼 위에 '자바 가상 머신' 이라는 도구를 설치함.
                 이 자바 가상 머신이 기계어의 집합으로 구성되어 있음. 물론 독립성을 가지고 있기
                 때문에 운영체제별로 자바 가상 머신을 각각 만들어 주면 가능함. 플랫폼마다 
                 자바 가상 머신의 모양이 다르기 때문임. 하지만 오라클에서 플랫폼별로
                 자바 가상 머신을 제공해 주고 있음. 개발자는 자신의 플랫폼에 맞는 자바 가상 머신을
                 설치하여 사용해 주기만 하면 됨.
                 
  3. JAVA는 메모리를 자동으로 관리한다.
     - JAVA는 개발자가 직접 메모리에 접근할 수 없도록 설계되어 있으며, 메모리를
             직접 JAVA가 관리함. 사용이 완료되면 쓰레기 수집기(Garbage Collection)을 
             실행시켜서 자동으로 사용하지 않는 내용을 제거시켜 줌.
             따라서 "메모리가 부족합니다" 라는 메세지가 나타나지 않음.
             또한, 개발자는 메모리 관리의 수고로움을 덜고, 핵심 기능 코드 작성에 집중할 수 있음.
              
  4. JAVA는 다양한 애플리케이션 개발이 용이하다.
     - 단순한 콘솔 프로그램으로부터 클라이언트용 애플리케이션 그리고
             모바일 안드로이드 앱에 이르기까지 다양하게 개발이 가능함.
              
              
* 자바 개발 환경
  - 자바 개발 도구(JDK) 설치
        자바 개발 키드(JDK : Java Developement Kit)와
        자바 실행 환경(JRE : Java Runtime Environment) 두 가지가 있어야 함.
    
    1. JDK는 말 그대로 JAVA를 이용해 프로그램을 개발하는데 필요한 도구들을 모아 놓은 집합.
       JDK는 프로그램 개발에 필요한 자바 가상 기계(JVM), 라이브러리 API,
             컴파일러 등의 개발 도구가 포함되어 있음.
             
    2. JRE는 완성된 프로그램을 실행하는데 필요한 환경을 말함.
       JRE는 프로그램 실행에 필요한 자바 가상 기계(JVM), 라이브러리 API만
             포함되어 있음.
              
         ※ JVM(Java Virtual Machine : 자바 가상 기계)
         - 운영체제는 자바 프로그램을 바로 실행할 수 없음. 자바 프로그램은 완전한
                    기계어가 아닌 중간 단계의 코드이기 때문임. 따라서 이것을 해석하고 실행할 수 
                    있는 가상의 운영체제가 필요함. 이것이 바로 자바 가상 기계임.
           JVM은 실 운영 체제를 대신하여 자바 프로그램을 실행하는 가상의 운영체제 
                    역할을 함. 쉽게 이야기를 한다면 "자바를 실행시키는 가상의 기계" 라고 생각하면 됨.     
              
              
* 소스 프로그램(source program)과 소스 파일(source file)
  - 소스 프로그램 : 사람이 인식할 수 있는 문장(프로그래밍 언어)을 나열해서 만든 프로그램.
                                	           
  - 소스 파일 : 소스 프로그램을 저장하고 있는 파일을 말함. 소스 파일의 이름은 
                        프로그램에서 class 뒤에 적은 클래스 이름에 확장자 .java를 붙임.
                        
  - 소스 프로그램 컴파일(compile)과 클래스 파일(class file)
        작성한 소스 프로그램은 바이트 코드 형식으로 변환되는 컴파일 작업이 필요함.
        예를 든다면 Hello.java라는 파일을 컴파일 작업을 진행하면 Hello.class 라는
        이름을 가진 클래스 파일이 생성이 됨.
        
  - 바이트 코드 파일은 완전한 기계어가 아니어서 단독으로 실행할 수 없고 JVM이 실행되어야 함.
    JVM을 구동시키는 명령어가 java.exe 이다. 예를 들어 Hello.class 라는 바이트 코드
       파일을 java.exe 로 실행하려면 명령 프롬프트 창에서 java Hello 라고 입력을 하고
       엔터키를 누르면 됨.   
    java.exe 명령어가 실행이 되면 JVM은 바이트 코드 파일(확장자가 .class)을 메모리로
       로드하고, 기계어를 이용하여 번역을 함. 그리고 main() 메서드를 찾아서 실행을 시킴.
                